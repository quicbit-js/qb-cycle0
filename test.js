// Software License Agreement (ISC License)
//
// Copyright (c) 2018, Matthew Voss
//
// Permission to use, copy, modify, and/or distribute this software for
// any purpose with or without fee is hereby granted, provided that the
// above copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

var test = require('test-kit').tape()
var qbcyc = require('.')

test('cycle', function (t) {
    t.table_assert([
        [ 'a',                                       'max', 'exp' ],
        [ [ 0, 1, 0, 0 ],                            9,     3 ],
        '# 0 cycle',
        [ [],                                        9,     0 ],
        '# 1 cycle',
        [ [ 1 ],                                     9,     1 ],
        [ [ 1, 1 ],                                  9,     1 ],
        [ [ 1, 1, 1 ],                               9,     1 ],
        [ [ 1, 1, 1, 1 ],                            9,     1 ],
        '# 2 cycle 01',
        [ [ 0, 1 ],                                  9,     2 ],
        [ [ 0, 1, 0 ],                               9,     2 ],
        [ [ 0, 1, 0, 1 ],                            9,     2 ],
        [ [ 0, 1, 0, 1, 0 ],                         9,     2 ],
        '# 2 cycle 10',
        [ [ 1, 0 ],                                  9,     2 ],
        [ [ 1, 0, 1 ],                               9,     2 ],
        [ [ 1, 0, 1, 0 ],                            9,     2 ],
        [ [ 1, 0, 1, 0, 1 ],                         9,     2 ],
        '# 3 cycle 100',
        [ [ 1, 0, 0 ],                               9,     3 ],
        [ [ 1, 0, 0, 1 ],                            9,     3 ],
        [ [ 1, 0, 0, 1, 0, 0, 1, 0 ],                9,     3 ],
        '# 3 cycle 001',
        [ [ 0, 0, 1 ],                               9,     3 ],
        [ [ 0, 0, 1, 0 ],                            9,     3 ],
        [ [ 0, 0, 1, 0, 0, 1, 0, 0 ],                9,     3 ],
        '# 3 cycle 010',
        [ [ 0, 1, 0 ],                               9,     2 ],
        [ [ 0, 1, 0, 0, 1 ],                         9,     3 ],
        [ [ 0, 1, 0, 0, 1, 0 ],                      9,     3 ],
        [ [ 0, 1, 0, 0, 1, 0, 0 ],                   9,     3 ],
        [ [ 0, 1, 0, 0, 1, 0, 0, 1 ],                9,     3 ],
        '# 5 cycle',
        [ [ 1, 1, 0, 0, 0 ],                         9,     5 ],
        '# 6 cycle',
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1 ],       9,     6 ],
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1 ],    9,     6 ],
        [ [ 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 0 ], 6,     6 ],
        [ [ 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 0 ], null,   6 ],
        [ [ 0, 1, 0, 0, 1, 2, 0, 1, 0, 0, 1, 2, 0 ], 5,     13 ],
    ], qbcyc.cycle0)
})

test('cycle clean', function (t) {
    t.table_assert([
        [ 'a',                                       'max', 'exp' ],
        '# 0 cycle',
        [ [],                                        9,     0 ],
        '# 1 cycle',
        [ [ 1 ],                                     9,     1 ],
        [ [ 1, 1 ],                                  9,     1 ],
        [ [ 1, 1, 1 ],                               9,     1 ],
        [ [ 1, 1, 1 ],                               1,     1 ],
        '# 2 cycle 01',
        [ [ 0, 1 ],                                  9,     2 ],
        [ [ 0, 1, 0 ],                               9,     3 ],
        [ [ 0, 1, 0, 0 ],                            9,     4 ],
        [ [ 0, 1, 0, 1 ],                            9,     2 ],
        [ [ 0, 1, 0, 1, 0 ],                         9,     5 ],
        '# 2 cycle 10',
        [ [ 1, 0 ],                                  9,     2 ],
        [ [ 1, 0, 1 ],                               9,     3 ],
        [ [ 1, 0, 1, 0 ],                            9,     2 ],
        [ [ 1, 0, 1, 0, 1 ],                         9,     5 ],
        '# 3 cycle 100',
        [ [ 1, 0, 0 ],                               9,     3 ],
        [ [ 1, 0, 0, 1 ],                            9,     4 ],
        [ [ 1, 0, 0, 1, 1, 0, 0, 1 ],                9,     4 ],
        '# 3 cycle 001',
        [ [ 0, 0, 1 ],                               9,     3 ],
        [ [ 0, 0, 1, 0 ],                            9,     4 ],
        [ [ 0, 0, 1, 0, 0, 1, 0, 0 ],                9,     8 ],
        [ [ 0, 0, 1, 0, 0, 1, 0, 0, 1 ],             9,     3 ],
        '# 6 cycle',
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1 ],       9,     11 ],
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1 ],    9,     6 ],
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0 ], 9,     13 ],
        '# 3, cycle',
        [ [ 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2 ],   5,     3 ],
        [ [ 0, 1, 2, 0, 1, 3, 0, 1, 2, 0, 1, 3 ],   6,     6 ],
        [ [ 0, 1, 0, 1, 2, 0, 1, 0, 1, 2 ],         5,     5 ],
        [ [ 0, 1, 0, 1, 2, 0, 1, 0, 1, 2 ],         4,     10 ],
        [ [ 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 0 ],   9,     12 ],
        '# max lambda',
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0 ], 4,     13 ],
        [ [ 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0 ], 5,     13 ],
    ], function (a, max) {
        return qbcyc.cycle0(a, max, true)
    })
})

test('cycle permutations', function (t) {
    t.table_assert([
        [ 's',     'max_lam', 'exp' ],
        [ '00',    4,         { '00': 1 } ],
        [ '000',   4,         { '000': 1 } ],
        [ '001',   4,         { '100': 3, '001': 3, '010': 2 } ],
        [ '011',   4,         { '101': 2, '110': 3, '011': 3 } ],
        [ '0001',  4,         { '1000': 4, '0001': 4, '0010': 3, '0100': 3 } ],
        [ '0011',  4,         { '1001': 3, '1010': 2, '1100': 4, '0011': 4, '0101': 2, '0110': 3 } ],
        [ '0011',  3,         { '1001': 3, '1010': 2, '1100': 4, '0011': 4, '0101': 2, '0110': 3 } ],
        [ '00001', 9,         { '10000': 5, '00001': 5, '00010': 4, '00100': 3, '01000': 4 } ],
        [ '00011', 9,         { '10001': 4, '10010': 3, '10100': 5, '11000': 5, '00011': 5, '00101': 5, '00110': 4, '01001': 3, '01010': 2, '01100': 4 } ],
        [ '00001', 3,         { '10000': 5, '00001': 5, '00010': 5, '00100': 3, '01000': 5 } ],
        [ '00011', 3,         { '10001': 5, '10010': 3, '10100': 5, '11000': 5, '00011': 5, '00101': 5, '00110': 5, '01001': 3, '01010': 2, '01100': 5 } ],
    ], function (s, max_lam) {
        var arr = t.permut(s.split('')).map(function (a) { return a.join('') })
        var obj = arr.reduce(function (o, s) { o[s] = 1; return o }, {})
        var uniq = Object.keys(obj)
        uniq.sort()
        return uniq.reduce(function (o, s) {
            var a = s.split('').map(function (d) { return parseInt(d) })
            o[s] = qbcyc.cycle0(a, max_lam, false)
            return o
        }, {})
    })
})

test('clean cycle permutations', function (t) {
    t.table_assert([
        [ 's',     'max_lam', 'exp' ],
        [ '00',     4,         { '00': 1 } ],
        [ '000',    4,         { '000': 1 } ],
        [ '001',    4,         { '100': 3, '001': 3, '010': 3 } ],
        [ '011',    4,         { '101': 3, '110': 3, '011': 3 } ],
        [ '0001',   4,         { '1000': 4, '0001': 4, '0010': 4, '0100': 4 } ],
        [ '0011',   4,         { '1001': 4, '1010': 2, '1100': 4, '0011': 4, '0101': 2, '0110': 4 } ],
        [ '0011',   3,         { '1001': 4, '1010': 2, '1100': 4, '0011': 4, '0101': 2, '0110': 4 } ],
        [ '00001',  9,         { '10000': 5, '00001': 5, '00010': 5, '00100': 5, '01000': 5 } ],
        [ '001122', 9,         { '100122': 6, '100212': 6, '100221': 6, '101022': 6, '101202': 6, '101220': 6, '102012': 6, '102021': 6, '102102': 3, '102120': 6, '102201': 6, '102210': 6, '110022': 6, '110202': 6, '110220': 6, '112002': 6, '112020': 6, '112200': 6, '120012': 6, '120021': 6, '120102': 6, '120120': 3, '120201': 6, '120210': 6, '121002': 6, '121020': 6, '121200': 6, '122001': 6, '122010': 6, '122100': 6, '200112': 6, '200121': 6, '200211': 6, '201012': 6, '201021': 6, '201102': 6, '201120': 6, '201201': 3, '201210': 6, '202011': 6, '202101': 6, '202110': 6, '210012': 6, '210021': 6, '210102': 6, '210120': 6, '210201': 6, '210210': 3, '211002': 6, '211020': 6, '211200': 6, '212001': 6, '212010': 6, '212100': 6, '220011': 6, '220101': 6, '220110': 6, '221001': 6, '221010': 6, '221100': 6, '001122': 6, '001212': 6, '001221': 6, '002112': 6, '002121': 6, '002211': 6, '010122': 6, '010212': 6, '010221': 6, '011022': 6, '011202': 6, '011220': 6, '012012': 3, '012021': 6, '012102': 6, '012120': 6, '012201': 6, '012210': 6, '020112': 6, '020121': 6, '020211': 6, '021012': 6, '021021': 3, '021102': 6, '021120': 6, '021201': 6, '021210': 6, '022011': 6, '022101': 6, '022110': 6 } ],
    ], function (s, max_lam, clean) {
        var arr = t.permut(s.split('')).map(function (a) { return a.join('') })
        var obj = arr.reduce(function (o, s) { o[s] = 1; return o }, {})
        var uniq = Object.keys(obj)
        uniq.sort()
        return uniq.reduce(function (o, s) {
            var a = s.split('').map(function (d) { return parseInt(d) })
            o[s] = qbcyc.cycle0(a, max_lam, true)
            return o
        }, {})
    })
})

test('reduce', function (t) {
    t.table_assert([
        [ 'a',                   'max',               'exp' ],
        [ [],                     9,                [] ],
        [ [1,2,1,2,1],           9,                 [1,2] ],
        [ [1,2,1,2,1],           null,                 [1,2] ],
        [ [1,2,3,1,2,3,1],       9,              [1,2,3] ],
        [ [1,2,3,1,2,3,1],       9,              [1,2,3] ],
        [ [1,2,3,4,5,6,1,2],       9,             [ 1,2,3,4,5,6] ],
        [ [1,2,3,4,5,6,1,2],       5,             [1,2,3,4,5,6,1,2] ],
    ], qbcyc.reduce)
})